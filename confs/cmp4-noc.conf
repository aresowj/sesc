# By Ching-Kai Liang

procsPerNode  = 4
cacheLineSize = 64
NOCdim = 2 # Assume a $(NOCdim) x $(NOCdim) NOC architecture

issue         = 2	
cpucore[0:$(procsPerNode)-1] = 'issueX' 

###########################################
# SYSTEM                                  #
#   --NoMigration: libcore/OSSim          #
#   --issueWrongPath: libcore/FetchEngine #
#   --technology: libcore/OSSim           #
###########################################
NoMigration    = true
pageSize       = 4096
issueWrongPath = true
technology = 'techParam'


################################
# clock-panalyzer input        #
#   --frequency: libcore/OSSim #
################################
[techParam]
frequency  = 1e9      # Hz


##############################
# PROCESSORS' CONFIGURATION  #
##############################
[issueX]
frequency       = 1e9
areaFactor      = ($(issue)*$(issue)+0.1)/16  # Area compared to Alpha264 EV6
inorder         = false
fetchWidth      = $(issue)
issueWidth      = $(issue)
retireWidth     = $(issue)
instQueueSize   = 32		
decodeDelay     = 2
renameDelay     = 1
wakeupDelay     = 2                 
maxBranches     = 16*$(issue)
bb4Cycle        = 1 # Number of basic blocks that can be fetched within a cycle. Basically how many branches can be fetched in one cycle
maxIRequests    = 4 # Max number of outstanding instruction requests
interClusterLat = 2
intraClusterLat = 1
cluster[0]      = 'FXClusterIssueX'
cluster[1]      = 'FPClusterIssueX'
stForwardDelay  = 1 
maxLoads        = 14*$(issue)+16
maxStores       = 10*$(issue)+16
regFileDelay    = 1
robSize         = 64	
intRegs         = 64	
fpRegs          = 64	
bpred           = 'BPredIssueX'
enableICache    = true
dtlb            = 'FXDTLB'
itlb            = 'FXITLB'
dataSource      = "DMemory DL1"
instrSource     = "IMemory IL1"
OSType          = 'dummy' # Memory OS, either Dummy or std


# integer functional units
[FXClusterIssueX]
winSize    = 12*$(Issue)+32 # number of entries in window
recycleAt  = 'Execute'
schedNumPorts = 4
schedPortOccp = 1
wakeUpNumPorts= 4
wakeUpPortOccp= 1
wakeupDelay   = 2
schedDelay    = 1 # Minimum latency like a intraClusterLat
iStoreLat  = 1
iStoreUnit = 'LDSTIssueX'
iLoadLat   = 1
iLoadUnit  = 'LDSTIssueX'
iALULat    = 1
iALUUnit   = 'ALUIssueX'
iBJLat     = 1
iBJUnit    = 'ALUIssueX'
iDivLat    = 12
iDivUnit   = 'ALUIssueX'
iMultLat   = 4
iMultUnit  = 'ALUIssueX'

[LDSTIssueX]
Num = $(issue)/3+1
Occ = 1

[ALUIssueX]
Num = $(issue)/3+1
Occ = 1


# floating point functional units
[FPClusterIssueX]
winSize    = 8*$(issue)
recycleAt  = 'Execute'
schedNumPorts = 4
schedPortOccp = 1
wakeUpNumPorts= 4
wakeUpPortOccp= 1
wakeupDelay   = 2
schedDelay    = 1 # Minimum latency like a intraClusterLat
fpALULat   = 1
fpALUUnit  = 'FPIssueX'
fpMultLat  = 8
fpMultUnit = 'FPIssueX'
fpDivLat   = 20
fpDivUnit  = 'FPIssueX'

[FPIssueX]
Num = $(issue)/2+1
Occ = 1

# branch prediction mechanism
[BPredIssueX]
type          = "hybrid"
BTACDelay     = 0 #Branch Taken ACcess Delay, 0 means unblock when execute, non-zero is a constant delay in branch
l1size        = 1
l2size        = 2*1024		
l2Bits        = 1
historySize   = 8	
Metasize      = 2*1024	
MetaBits      = 2
localSize     = 2*1024
localBits     = 2
btbSize       = 256	
btbBsize      = 1
btbAssoc      = 2
btbReplPolicy = 'LRU'
btbHistory    = 0
rasSize       = 32


# memory translation mechanism
[FXDTLB]
size       = 64*8
assoc      = 4
bsize      = 8
numPorts   = 2
replPolicy = 'LRU'
deviceType = 'cache' # libcore/GMemorySystem, options: dummy, cache, icache, smpcache

[FXITLB]
size       = 64*8
assoc      = 4
bsize      = 8
numPorts   = 2
replPolicy = 'LRU'
deviceType = 'cache'


##############################
# MEMORY SUBSYSTEM           #
##############################
# instruction source
[IMemory]
deviceType    = 'icache'
size          = 32*1024		
assoc         = 4
bsize         = $(cacheLineSize)
writePolicy   = 'WB'
replPolicy = 'LRU'
protocol	  = 'DMESI'
numPorts      = 1
portOccp      = 1
hitDelay      = 1 
missDelay     = 1                # this number is added to the hitDelay
#displNotify   = false
MSHR          = "iMSHR"
lowerLevel	  = "Router RTR sharedBy 1" # Format: [Type] [UserDefinedName] [ShareOption]
sideLowerLevel = "" # Another lower level

[iMSHR]
type = 'single'
size = 32
bsize = $(cacheLineSize)

# data source
[DMemory]
deviceType    = 'smpcache'
size          = 32*1024		
assoc         = 4 
bsize         = $(cacheLineSize)
writePolicy   = 'WB'
replPolicy = 'LRU'
protocol      = 'DMESI'
numPorts      = 2	
portOccp      = 1 # Number of occupancy per port. 0: UnlimitedPort, 1:FullyPipelinedPort, other value: PortPipe
hitDelay      = 1
missDelay     = 1               
#displNotify   = false
MSHR          = "DMSHR"
lowerLevel	  = "Router RTR sharedBy 1"
sideLowerLevel	  = "L2Slice L2S" # Another lower level

[DMSHR]
type = 'single' # Options: none, nodeps, full, single, banked Check libsuc/MSHR
size = 64
bsize = $(cacheLineSize)


[Router]
deviceType = 'router'
delay      = 1
numPorts      = 2  # read / write
portOccp      = 1
dimX            = $(NOCdim) # This needs to be the same with NOC dimension
dimY            = $(NOCdim) # This needs to be the same with NOC dimension
lowerLevel    ="NOC NOC shared"

[NOC]
deviceType = 'booksim'
booksim_config      = 'mesh22.booksim'
booksim_output      = 'booksim.log'
booksim_sample      = 1000000
lowerLevel    = "MemoryCtrl MemCtrl shared"

[L2Slice]
deviceType    = 'slicecache'
inclusive     = false
size          = 1*1024*1024
assoc         = 16
bsize         = $(cacheLineSize)
writePolicy   = 'WB'
replPolicy = 'LRU'
numPorts      = 2                # one for L1, one for snooping
portOccp      = 1		# throughput of a cache
hitDelay      = 12
missDelay     = 12               # exclusive, i.e., not added to hitDelay
numPortsDir      = 1                # one for L1, one for snooping
portOccpDir      = 1		# throughput of a cache
hitDelayDir      = 1
MSHR          = 'L2MSHR'
lowerLevel    = "Router RTR sharedBy 1"

[L2MSHR]
size =  64
type = 'single'
bsize = $(cacheLineSize)

[MemoryCtrl]
deviceType	  = 'memoryController'
numPorts      = 8	# 8 channel
portOccp      = 1
delay		  = 1
lowerLevel    = "MemoryBus MemoryBus"

[MemoryBus]
deviceType    = 'bus'
numPorts      = 8
portOccp      = $(cacheLineSize) / 8   # assuming 8*8 Gbyte/s  
delay         = 5
lowerLevel    = "Memory Memory"

[Memory]
deviceType    = 'niceCache'
size          = 64
assoc         = 1
bsize         = 64
writePolicy   = 'WB'
replPolicy = 'LRU'
numPorts      = 1
portOccp      = 1
hitDelay      = 200 
missDelay     = 10000
MSHR          = NoMSHR
lowerLevel    = 'voidDevice'

[NoMSHR]
type = 'none'
size = 128
bsize = 64

[voidDevice]
deviceType    = 'void'

############################
#     BEGIN MIPSEMUL       #
############################

[FileSys]
mount="/bin=/mipsroot/tools/bin:/lib=/mipsroot/tools/lib:/tools=/mipsroot/tools"
