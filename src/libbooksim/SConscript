Import('*')

if env['NETWORK'] != 'BOOKSIM':
    Return()

Source('config_utils.cpp', lib='booksim')
Source('booksim_config.cpp', lib='booksim')
Source('module.cpp', lib='booksim')
Source('buffer.cpp', lib='booksim')
Source('vc.cpp', lib='booksim')
Source('routefunc.cpp', lib='booksim')
Source('traffic.cpp', lib='booksim')
Source('flitchannel.cpp', lib='booksim')
Source('trafficmanager.cpp', lib='booksim')
Source('packet_reply_info.cpp', lib='booksim')
Source('buffer_state.cpp', lib='booksim')
Source('stats.cpp', lib='booksim')
Source('credit.cpp', lib='booksim')
Source('outputset.cpp', lib='booksim')
Source('flit.cpp', lib='booksim')
Source('injection.cpp', lib='booksim')
Source('misc_utils.cpp', lib='booksim')
Source('rng_wrapper.cpp', lib='booksim')
Source('rng_double_wrapper.cpp', lib='booksim')

Source('networks/anynet.cpp', lib='booksim')
Source('networks/cmesh.cpp', lib='booksim')
Source('networks/dragonfly.cpp', lib='booksim')
Source('networks/fattree.cpp', lib='booksim')
Source('networks/flatfly_onchip.cpp', lib='booksim')
Source('networks/fly.cpp', lib='booksim')
Source('networks/kncube.cpp', lib='booksim')
Source('networks/network.cpp', lib='booksim')
Source('networks/qtree.cpp', lib='booksim')
Source('networks/tree4.cpp', lib='booksim')

Source('allocators/allocator.cpp', lib='booksim')
Source('allocators/islip.cpp', lib='booksim')
Source('allocators/loa.cpp', lib='booksim')
Source('allocators/maxsize.cpp', lib='booksim')
Source('allocators/pim.cpp', lib='booksim')
Source('allocators/selalloc.cpp', lib='booksim')
Source('allocators/separable.cpp', lib='booksim')
Source('allocators/separable_input_first.cpp', lib='booksim')
Source('allocators/separable_output_first.cpp', lib='booksim')
Source('allocators/wavefront.cpp', lib='booksim')

Source('arbiters/arbiter.cpp', lib='booksim')
Source('arbiters/matrix_arb.cpp', lib='booksim')
Source('arbiters/prio_arb.cpp', lib='booksim')
Source('arbiters/roundrobin_arb.cpp', lib='booksim')
Source('arbiters/tree_arb.cpp', lib='booksim')

Source('routers/chaos_router.cpp', lib='booksim')
Source('routers/event_router.cpp', lib='booksim')
Source('routers/iq_router.cpp', lib='booksim')
Source('routers/router.cpp', lib='booksim')

Source('power/buffer_monitor.cpp', lib='booksim')
Source('power/power_module.cpp', lib='booksim')
Source('power/switch_monitor.cpp', lib='booksim')

YaccSource('config.y', lib='booksim', opt='')
#YaccSource('config.y', lib='booksim', opt='-y')
LexSource('config.l', lib='booksim', opt='')

